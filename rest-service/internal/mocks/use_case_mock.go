// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "calls-service/rest-service/internal/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUseCase is an autogenerated mock type for the UseCase type
type MockUseCase struct {
	mock.Mock
}

type MockUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUseCase) EXPECT() *MockUseCase_Expecter {
	return &MockUseCase_Expecter{mock: &_m.Mock}
}

// DeleteCall provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockUseCase) DeleteCall(_a0 context.Context, _a1 int64, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_DeleteCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCall'
type MockUseCase_DeleteCall_Call struct {
	*mock.Call
}

// DeleteCall is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockUseCase_Expecter) DeleteCall(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockUseCase_DeleteCall_Call {
	return &MockUseCase_DeleteCall_Call{Call: _e.mock.On("DeleteCall", _a0, _a1, _a2)}
}

func (_c *MockUseCase_DeleteCall_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockUseCase_DeleteCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockUseCase_DeleteCall_Call) Return(_a0 error) *MockUseCase_DeleteCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_DeleteCall_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockUseCase_DeleteCall_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCallByID provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockUseCase) GetUserCallByID(_a0 context.Context, _a1 int64, _a2 int64) (*entity.CallResponse, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCallByID")
	}

	var r0 *entity.CallResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*entity.CallResponse, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *entity.CallResponse); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CallResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetUserCallByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCallByID'
type MockUseCase_GetUserCallByID_Call struct {
	*mock.Call
}

// GetUserCallByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockUseCase_Expecter) GetUserCallByID(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockUseCase_GetUserCallByID_Call {
	return &MockUseCase_GetUserCallByID_Call{Call: _e.mock.On("GetUserCallByID", _a0, _a1, _a2)}
}

func (_c *MockUseCase_GetUserCallByID_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockUseCase_GetUserCallByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockUseCase_GetUserCallByID_Call) Return(_a0 *entity.CallResponse, _a1 error) *MockUseCase_GetUserCallByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetUserCallByID_Call) RunAndReturn(run func(context.Context, int64, int64) (*entity.CallResponse, error)) *MockUseCase_GetUserCallByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserCalls provides a mock function with given fields: _a0, _a1
func (_m *MockUseCase) GetUserCalls(_a0 context.Context, _a1 int64) ([]entity.CallResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCalls")
	}

	var r0 []entity.CallResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.CallResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.CallResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CallResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_GetUserCalls_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserCalls'
type MockUseCase_GetUserCalls_Call struct {
	*mock.Call
}

// GetUserCalls is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *MockUseCase_Expecter) GetUserCalls(_a0 interface{}, _a1 interface{}) *MockUseCase_GetUserCalls_Call {
	return &MockUseCase_GetUserCalls_Call{Call: _e.mock.On("GetUserCalls", _a0, _a1)}
}

func (_c *MockUseCase_GetUserCalls_Call) Run(run func(_a0 context.Context, _a1 int64)) *MockUseCase_GetUserCalls_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUseCase_GetUserCalls_Call) Return(_a0 []entity.CallResponse, _a1 error) *MockUseCase_GetUserCalls_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_GetUserCalls_Call) RunAndReturn(run func(context.Context, int64) ([]entity.CallResponse, error)) *MockUseCase_GetUserCalls_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: _a0, _a1
func (_m *MockUseCase) LoginUser(_a0 context.Context, _a1 entity.AuthRequest) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.AuthRequest) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.AuthRequest) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.AuthRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUseCase_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUseCase_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.AuthRequest
func (_e *MockUseCase_Expecter) LoginUser(_a0 interface{}, _a1 interface{}) *MockUseCase_LoginUser_Call {
	return &MockUseCase_LoginUser_Call{Call: _e.mock.On("LoginUser", _a0, _a1)}
}

func (_c *MockUseCase_LoginUser_Call) Run(run func(_a0 context.Context, _a1 entity.AuthRequest)) *MockUseCase_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AuthRequest))
	})
	return _c
}

func (_c *MockUseCase_LoginUser_Call) Return(_a0 string, _a1 error) *MockUseCase_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUseCase_LoginUser_Call) RunAndReturn(run func(context.Context, entity.AuthRequest) (string, error)) *MockUseCase_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: _a0, _a1
func (_m *MockUseCase) RegisterUser(_a0 context.Context, _a1 entity.AuthRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.AuthRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUseCase_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.AuthRequest
func (_e *MockUseCase_Expecter) RegisterUser(_a0 interface{}, _a1 interface{}) *MockUseCase_RegisterUser_Call {
	return &MockUseCase_RegisterUser_Call{Call: _e.mock.On("RegisterUser", _a0, _a1)}
}

func (_c *MockUseCase_RegisterUser_Call) Run(run func(_a0 context.Context, _a1 entity.AuthRequest)) *MockUseCase_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.AuthRequest))
	})
	return _c
}

func (_c *MockUseCase_RegisterUser_Call) Return(_a0 error) *MockUseCase_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_RegisterUser_Call) RunAndReturn(run func(context.Context, entity.AuthRequest) error) *MockUseCase_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCall provides a mock function with given fields: _a0, _a1
func (_m *MockUseCase) SaveCall(_a0 context.Context, _a1 entity.Call) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveCall")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Call) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_SaveCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCall'
type MockUseCase_SaveCall_Call struct {
	*mock.Call
}

// SaveCall is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.Call
func (_e *MockUseCase_Expecter) SaveCall(_a0 interface{}, _a1 interface{}) *MockUseCase_SaveCall_Call {
	return &MockUseCase_SaveCall_Call{Call: _e.mock.On("SaveCall", _a0, _a1)}
}

func (_c *MockUseCase_SaveCall_Call) Run(run func(_a0 context.Context, _a1 entity.Call)) *MockUseCase_SaveCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Call))
	})
	return _c
}

func (_c *MockUseCase_SaveCall_Call) Return(_a0 error) *MockUseCase_SaveCall_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_SaveCall_Call) RunAndReturn(run func(context.Context, entity.Call) error) *MockUseCase_SaveCall_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCallStatus provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockUseCase) UpdateCallStatus(_a0 context.Context, _a1 int64, _a2 int64, _a3 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCallStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUseCase_UpdateCallStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCallStatus'
type MockUseCase_UpdateCallStatus_Call struct {
	*mock.Call
}

// UpdateCallStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
//   - _a3 string
func (_e *MockUseCase_Expecter) UpdateCallStatus(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockUseCase_UpdateCallStatus_Call {
	return &MockUseCase_UpdateCallStatus_Call{Call: _e.mock.On("UpdateCallStatus", _a0, _a1, _a2, _a3)}
}

func (_c *MockUseCase_UpdateCallStatus_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64, _a3 string)) *MockUseCase_UpdateCallStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockUseCase_UpdateCallStatus_Call) Return(_a0 error) *MockUseCase_UpdateCallStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUseCase_UpdateCallStatus_Call) RunAndReturn(run func(context.Context, int64, int64, string) error) *MockUseCase_UpdateCallStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUseCase creates a new instance of MockUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUseCase {
	mock := &MockUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
